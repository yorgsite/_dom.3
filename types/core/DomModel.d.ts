import { DomModule } from "../_dom";
import { ListenerEvent } from "../tools/Listener";
import { CssVarsType, DomRulesDataType, DomRulesType } from "./types";
export type DomModelClassType = (new (...args: any[]) => DomModel) & Pick<typeof DomModel, keyof typeof DomModel>;
export type HTMLChildType = string | Text | HTMLElement;
export type DomChildType = HTMLChildType | DomModel;
export declare class DomModel<T extends HTMLElement = HTMLElement> {
    private _inputs;
    private _children;
    private static _rules;
    private static _cssVars;
    static tagName: string;
    static className: string;
    static shadowRules: boolean;
    static rulesData: DomRulesDataType | ((instance: DomModelClassType) => DomRulesDataType);
    static cssVars: CssVarsType | undefined;
    static initRules(): void;
    static initTagName(constr: DomModelClassType): void;
    static rules(): DomRulesType;
    private _modelLifeObserver;
    private _modelAttrObserver;
    private _inputListener;
    private _mp_listener;
    private _module;
    private _rules;
    private _cssVars;
    private _inputProxy;
    private _requireLifeObserver;
    private _dom;
    get dom(): HTMLElement;
    constructor(_inputs?: Record<string, any>, _children?: Array<DomChildType>);
    clone(): DomModel<HTMLElement>;
    private ___init_dom_model;
    get tagName(): string;
    get rules(): DomRulesType;
    get cssVars(): {
        [k: string]: string;
    };
    get shadowRules(): boolean;
    get module(): DomModule;
    get inputs(): object;
    private _initLifeObserver;
    connect(): void;
    disconnect(): void;
    setInput(name: string, value: any): void;
    onInput(name: string, callback: (evt: ListenerEvent<string, any>) => any): void;
    _domOn(type: string, callback: (evt: ListenerEvent<string, any>) => any): void;
    _domOnceBuilt(callback: (evt?: ListenerEvent<string, any>) => any): void;
    _domOnInit(params?: Record<string, any>, children?: Array<DomChildType>): Promise<unknown> | void;
    _domOnAfterInit(params?: Record<string, any>, children?: Array<DomChildType>): Promise<unknown> | void;
    _domOnAttributeChange(name: string, value: any, oldValue: any): Promise<unknown> | void;
    _domOnReady(): Promise<unknown> | void;
    _domOnDestroy(): Promise<unknown> | void;
    _domOnBuild(params?: Record<string, any>, children?: Array<DomChildType>): HTMLElement | Array<DomChildType> | Promise<HTMLElement> | Promise<Array<DomChildType>>;
}
